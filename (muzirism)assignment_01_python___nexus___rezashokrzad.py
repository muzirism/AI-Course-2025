# -*- coding: utf-8 -*-
"""(muzirism)Assignment 01. Python | Nexus | RezaShokrzad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14_xMrQOrQsClavCf24TBjtjUBwfh2J5b

# üìö Assignment 1 ‚Äî Python Fundamentals
Welcome to your first hands-on practice! This set of four mini-projects walks you through the basics every Python (and ML) developer leans on daily:

1. Variable types

2. Core containers

3. Functions

4. Classes

Each part begins with quick pointers, then gives you two bite-sized tasks to code. Replace every # TODO with working Python and run your script or notebook to check the result. Happy hacking! üòä

## 1. Variable Types üßÆ
**Quick-start notes**

* Primitive types: `int`, `float`, `str`, `bool`

* Use `type(obj)` to inspect an object‚Äôs type.

* Casting ‚Üî converting: `int("3")`, `str(3.14)`, `bool(0)`, etc.

### Task 1 ‚Äî Celsius ‚Üí Fahrenheit
"""

# üëâ a Celsius temperature (as text), convert it to float,
#    compute Fahrenheit (¬∞F = ¬∞C * 9/5 + 32) and print a nicely formatted line.
# TODO: your code here
temp_in_cel = "48"
temp_in_cel_float = float(temp_in_cel)
temp_in_fahr = temp_in_cel_float * 9/5 + 32
print(f"Temprature in Celcius is {temp_in_cel_float} Which is {temp_in_fahr} Fahrenheit")

"""### Task 2 ‚Äî Tiny Calculator

"""

# üëâ Store two numbers of **different types** (one int, one float),
#    then print their sum, difference, product, true division, and floor division.
# TODO: your code here
num_1=12
num_2=8.25
print(f"First Number is {num_1} and Second Number is {num_2} : Sum= {num_1+num_2} difference= {num_1-num_2} product={num_1*num_2} true division={num_1/num_2} floor division={num_1//num_2}")

"""## 2. Containers üì¶ (list, tuple, set, dict)
**Quick-start notes**

| Container | Mutable? | Ordered?                      | Typical use                       |
| --------- | -------- | ----------------------------- | --------------------------------- |
| `list`    | ‚úî        | ‚úî                             | Growth, indexing, slicing         |
| `tuple`   | ‚úñ        | ‚úî                             | Fixed-size records, hashable keys |
| `set`     | ‚úî        | ‚úñ                             | Deduplication, membership tests   |
| `dict`    | ‚úî        | ‚úñ (3.7 + preserves insertion) | Key ‚Üí value look-ups              |

### Task 1 ‚Äî Grocery Basket
"""

# Start with an empty shopping list (list).
# 1. Append at least 4 items supplied in one line of user input (comma-separated).
# 2. Convert the list to a *tuple* called immutable_basket.
# 3. Print the third item using tuple indexing.
# TODO: your code here
shopping_list=[]
shopping_items = "apple,banana,lemon,carrot"
shopping_list.extend(shopping_items.split(","))
immutable_basket = tuple(shopping_list)
print(immutable_basket[2])

"""### Task 2 ‚Äî Word Stats"""

sample = "to be or not to be that is the question"

# 1. Build a set `unique_words` containing every distinct word.
# 2. Build a dict `word_counts` mapping each word to the number of times it appears.
#    (Hint: .split() + a simple loop)
# 3. Print the two structures and explain (in a comment) their main difference.
# TODO: your code here
sample_list = sample.split()
unique_words= set(sample_list)
word_counts={}
for words in unique_words :
  word_counts[words]= sample_list.count(words)

print(f"The Set Structure: {unique_words} \nThe Dictionary Structure: {word_counts} ")
#The main difference between set and dictionary in python is the way they store and organize data, set store unique value only but dictionary store key-value pairs

"""## 3. Functions üîß
**Quick-start notes**

* Define with `def`, return with `return`.

* Parameters can have default values.

* Docstrings (`''' ‚Ä¶ '''`) document behaviour.

### Task 1 ‚Äî Prime Tester
"""

def is_prime(n: int) -> bool:
    """
    Return True if n is a prime number, else False.
    0 and 1 are *not* prime.
    """
    # TODO: replace pass with your implementation
    if n<2 :
      return False

    for i in range(2,int(n**0.5)+1):
      if (n%i==0):
       return False
    else:
      return True




# Quick self-check
print([x for x in range(10) if is_prime(x)])   # Expected: [2, 3, 5, 7]

"""### Task 2 ‚Äî Repeater Greeter"""

def greet(name: str, times: int = 1) -> None:
    """Print `name`, capitalised, exactly `times` times on one line."""
    # TODO: your code here
    cap_name= name.capitalize()
    print ((cap_name+" ")*times)
    #print(f"{for i in range(times) name.capitalize()}")




greet("alice")          # Alice
greet("bob", times=3)   # Bob Bob Bob

"""## 4. Classes üèóÔ∏è
**Quick-start notes**

* Create with class Name:

* Special method __init__ runs on construction.

* self refers to the instance; attributes live on self.

### Task 1 ‚Äî Simple Counter
"""

class Counter:
    """Counts how many times `increment` is called."""
    # TODO:
    # 1. In __init__, store an internal count variable starting at 0.
    # 2. Method increment(step: int = 1) adds `step` to the count.
    # 3. Method value() returns the current count.
    def __init__(self) :
       self.count= 0

    def increment(self):
       self.count+=1

    def value(self):
       return self.count


c = Counter()
for _ in range(5):
    c.increment()
print(c.value())   # Expected: 5

"""### Task 2 ‚Äî 2-D Point with Distance"""

import math

class Point:
    """
    A 2-D point supporting distance calculation.
    Usage:
        p = Point(3, 4)
        q = Point(0, 0)
        print(p.distance_to(q))  # 5.0
    """
    # TODO:
    # 1. Store x and y as attributes.
    # 2. Implement distance_to(other) using the Euclidean formula.
    def __init__(self,x,y):
      self.x= x
      self.y= y

    def distance_to(self,other):
      dx = self.x - other.x
      dy= self.y - other.y
      return math.sqrt(dx**2 + dy**2)



# Smoke test
p, q = Point(3, 4), Point(0, 0)
assert round(p.distance_to(q), 1) == 5.0